// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.24.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<AtomicBool>>
@sealed
class AtomicBool extends RustOpaque {
  AtomicBool.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  AtomicBool.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AtomicBool,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AtomicBool,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AtomicBoolPtr,
  );
}

class Mqtt {
  final String clientId;
  final AtomicBool test;

  const Mqtt({
    required this.clientId,
    required this.test,
  });

  Stream<String> connect({required String host, dynamic hint}) =>
      RustLib.instance.api.mqttConnect(
        that: this,
        host: host,
      );

  static Mqtt newMqtt({required String clientId, dynamic hint}) =>
      RustLib.instance.api.mqttNew(clientId: clientId, hint: hint);

  Future<void> send({required String payload, dynamic hint}) =>
      RustLib.instance.api.mqttSend(
        that: this,
        payload: payload,
      );

  @override
  int get hashCode => clientId.hashCode ^ test.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Mqtt &&
          runtimeType == other.runtimeType &&
          clientId == other.clientId &&
          test == other.test;
}
